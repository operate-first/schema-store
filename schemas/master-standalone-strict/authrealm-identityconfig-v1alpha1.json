{
  "description": "AuthRealm is the Schema for the authrealms API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "identityconfig.identitatem.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "AuthRealm"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    },
    "spec": {
      "description": "AuthRealmSpec defines the desired state of AuthRealm",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "routeSubDomain"
      ],
      "properties": {
        "certificatesSecretRef": {
          "description": "Certificates references a secret containing `ca.crt`, `tls.crt`, and `tls.key`",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "githubExtraConfigs": {
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "loadAllGroups": {
                "description": "LoadAllGroups if true the groups import will be enabled",
                "type": [
                  "boolean",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "host": {
          "description": "Host defines the url of the proxy",
          "type": [
            "string",
            "null"
          ]
        },
        "identityProviders": {
          "description": "IdentityProviders reference an identity provider",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "IdentityProvider provides identities for users authenticating using credentials",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "basicAuth": {
                "description": "basicAuth contains configuration options for the BasicAuth IdP",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "ca": {
                    "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced config map",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "tlsClientCert": {
                    "description": "tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key \"tls.crt\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "tlsClientKey": {
                    "description": "tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key \"tls.key\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "url": {
                    "description": "url is the remote URL to connect to",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "github": {
                "description": "github enables user authentication using GitHub credentials",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "ca": {
                    "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. This can only be configured when hostname is set to a non-empty value. The namespace for this config map is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced config map",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "clientID": {
                    "description": "clientID is the oauth client ID",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "clientSecret": {
                    "description": "clientSecret is a required reference to the secret by name containing the oauth client secret. The key \"clientSecret\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "hostname": {
                    "description": "hostname is the optional domain (e.g. \"mycompany.com\") for use with a hosted instance of GitHub Enterprise. It must match the GitHub Enterprise settings value configured at /setup/settings#hostname.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "organizations": {
                    "description": "organizations optionally restricts which organizations are allowed to log in",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "teams": {
                    "description": "teams optionally restricts which teams are allowed to log in. Format is <org>/<team>.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                "additionalProperties": false
              },
              "gitlab": {
                "description": "gitlab enables user authentication using GitLab credentials",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "ca": {
                    "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced config map",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "clientID": {
                    "description": "clientID is the oauth client ID",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "clientSecret": {
                    "description": "clientSecret is a required reference to the secret by name containing the oauth client secret. The key \"clientSecret\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "url": {
                    "description": "url is the oauth server base URL",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "google": {
                "description": "google enables user authentication using Google credentials",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "clientID": {
                    "description": "clientID is the oauth client ID",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "clientSecret": {
                    "description": "clientSecret is a required reference to the secret by name containing the oauth client secret. The key \"clientSecret\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "hostedDomain": {
                    "description": "hostedDomain is the optional Google App domain (e.g. \"mycompany.com\") to restrict logins to",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "htpasswd": {
                "description": "htpasswd enables user authentication using an HTPasswd file to validate credentials",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "fileData": {
                    "description": "fileData is a required reference to a secret by name containing the data to use as the htpasswd file. The key \"htpasswd\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. If the specified htpasswd data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "keystone": {
                "description": "keystone enables user authentication using keystone password credentials",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "ca": {
                    "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced config map",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "domainName": {
                    "description": "domainName is required for keystone v3",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "tlsClientCert": {
                    "description": "tlsClientCert is an optional reference to a secret by name that contains the PEM-encoded TLS client certificate to present when connecting to the server. The key \"tls.crt\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "tlsClientKey": {
                    "description": "tlsClientKey is an optional reference to a secret by name that contains the PEM-encoded TLS private key for the client certificate referenced in tlsClientCert. The key \"tls.key\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. If the specified certificate data is not valid, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "url": {
                    "description": "url is the remote URL to connect to",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "ldap": {
                "description": "ldap enables user authentication using LDAP credentials",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "attributes": {
                    "description": "attributes maps LDAP attributes to identities",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "email": {
                        "description": "email is the list of attributes whose values should be used as the email address. Optional. If unspecified, no email is set for the identity",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "id": {
                        "description": "id is the list of attributes whose values should be used as the user ID. Required. First non-empty attribute is used. At least one attribute is required. If none of the listed attribute have a value, authentication fails. LDAP standard identity attribute is \"dn\"",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "name": {
                        "description": "name is the list of attributes whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity LDAP standard display name attribute is \"cn\"",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "preferredUsername": {
                        "description": "preferredUsername is the list of attributes whose values should be used as the preferred username. LDAP standard login attribute is \"uid\"",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      }
                    },
                    "additionalProperties": false
                  },
                  "bindDN": {
                    "description": "bindDN is an optional DN to bind with during the search phase.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "bindPassword": {
                    "description": "bindPassword is an optional reference to a secret by name containing a password to bind with during the search phase. The key \"bindPassword\" is used to locate the data. If specified and the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "ca": {
                    "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced config map",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "insecure": {
                    "description": "insecure, if true, indicates the connection should not use TLS WARNING: Should not be set to `true` with the URL scheme \"ldaps://\" as \"ldaps://\" URLs always attempt to connect using TLS, even when `insecure` is set to `true` When `true`, \"ldap://\" URLS connect insecurely. When `false`, \"ldap://\" URLs are upgraded to a TLS connection using StartTLS as specified in https://tools.ietf.org/html/rfc2830.",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "url": {
                    "description": "url is an RFC 2255 URL which specifies the LDAP search parameters to use. The syntax of the URL is: ldap://host:port/basedn?attribute?scope?filter",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "mappingMethod": {
                "description": "mappingMethod determines how identities from this provider are mapped to users Defaults to \"claim\"",
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "description": "name is used to qualify the identities returned by this provider. - It MUST be unique and not shared by any other identity provider used - It MUST be a valid path segment: name cannot equal \".\" or \"..\" or contain \"/\" or \"%\" or \":\" Ref: https://godoc.org/github.com/openshift/origin/pkg/user/apis/user/validation#ValidateIdentityProviderName",
                "type": [
                  "string",
                  "null"
                ]
              },
              "openID": {
                "description": "openID enables user authentication using OpenID credentials",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "ca": {
                    "description": "ca is an optional reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. The key \"ca.crt\" is used to locate the data. If specified and the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. If empty, the default system roots are used. The namespace for this config map is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced config map",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "claims": {
                    "description": "claims mappings",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "email": {
                        "description": "email is the list of claims whose values should be used as the email address. Optional. If unspecified, no email is set for the identity",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "groups": {
                        "description": "groups is the list of claims value of which should be used to synchronize groups from the OIDC provider to OpenShift for the user. If multiple claims are specified, the first one with a non-empty value is used.",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "OpenIDClaim represents a claim retrieved from an OpenID provider's tokens or userInfo responses",
                          "type": [
                            "string",
                            "null"
                          ],
                          "minLength": 1
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "name": {
                        "description": "name is the list of claims whose values should be used as the display name. Optional. If unspecified, no display name is set for the identity",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      },
                      "preferredUsername": {
                        "description": "preferredUsername is the list of claims whose values should be used as the preferred username. If unspecified, the preferred username is determined from the value of the sub claim",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "x-kubernetes-list-type": "atomic"
                      }
                    },
                    "additionalProperties": false
                  },
                  "clientID": {
                    "description": "clientID is the oauth client ID",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "clientSecret": {
                    "description": "clientSecret is a required reference to the secret by name containing the oauth client secret. The key \"clientSecret\" is used to locate the data. If the secret or expected key is not found, the identity provider is not honored. The namespace for this secret is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced secret",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "extraAuthorizeParameters": {
                    "description": "extraAuthorizeParameters are any custom parameters to add to the authorize request.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "additionalProperties": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "extraScopes": {
                    "description": "extraScopes are any scopes to request in addition to the standard \"openid\" scope.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "issuer": {
                    "description": "issuer is the URL that the OpenID Provider asserts as its Issuer Identifier. It must use the https scheme with no query or fragment component.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "requestHeader": {
                "description": "requestHeader enables user authentication using request header credentials",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "ca": {
                    "description": "ca is a required reference to a config map by name containing the PEM-encoded CA bundle. It is used as a trust anchor to validate the TLS certificate presented by the remote server. Specifically, it allows verification of incoming requests to prevent header spoofing. The key \"ca.crt\" is used to locate the data. If the config map or expected key is not found, the identity provider is not honored. If the specified ca data is not valid, the identity provider is not honored. The namespace for this config map is openshift-config.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "name is the metadata.name of the referenced config map",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  },
                  "challengeURL": {
                    "description": "challengeURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect WWW-Authenticate challenges will be redirected here. ${url} is replaced with the current URL, escaped to be safe in a query parameter https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string https://www.example.com/auth-proxy/oauth/authorize?${query} Required when challenge is set to true.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "clientCommonNames": {
                    "description": "clientCommonNames is an optional list of common names to require a match from. If empty, any client certificate validated against the clientCA bundle is considered authoritative.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "emailHeaders": {
                    "description": "emailHeaders is the set of headers to check for the email address",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "headers": {
                    "description": "headers is the set of headers to check for identity information",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "loginURL": {
                    "description": "loginURL is a URL to redirect unauthenticated /authorize requests to Unauthenticated requests from OAuth clients which expect interactive logins will be redirected here ${url} is replaced with the current URL, escaped to be safe in a query parameter https://www.example.com/sso-login?then=${url} ${query} is replaced with the current query string https://www.example.com/auth-proxy/oauth/authorize?${query} Required when login is set to true.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nameHeaders": {
                    "description": "nameHeaders is the set of headers to check for the display name",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "preferredUsernameHeaders": {
                    "description": "preferredUsernameHeaders is the set of headers to check for the preferred username",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                "additionalProperties": false
              },
              "type": {
                "description": "type identifies the identity provider type for this entry.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "ldapExtraConfigs": {
          "description": "LDAPExtraConfigs extra server configuration setting for LDAP, the key being the idp.name",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "groupSearch": {
                "description": "Optional The groupSearch to apply to find the groups of the user",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "baseDN": {
                    "description": "BaseDN to start the search from. For example \"cn=groups,dc=example,dc=com\"",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "filter": {
                    "description": "Optional filter to apply when searching the directory. For example \"(objectClass=posixGroup)\"",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "nameAttr": {
                    "description": "The attribute of the group that represents its name.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "scope": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "userMatchers": {
                    "description": "Array of the field pairs used to match a user to a group. See the \"UserMatcher\" struct for the exact field names \n Each pair adds an additional requirement to the filter that an attribute in the group match the user's attribute value. For example that the \"members\" attribute of a group matches the \"uid\" of the user. The exact filter being added is: \n (userMatchers[n].<groupAttr>=userMatchers[n].<userAttr value>)",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "LDAP UserMatcher holds information about user and group matching",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "groupAttr",
                        "userAttr"
                      ],
                      "properties": {
                        "groupAttr": {
                          "type": "string"
                        },
                        "userAttr": {
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        },
        "placementRef": {
          "description": "Placement defines a rule to select a set of ManagedClusters from the ManagedClusterSets bound to the placement namespace.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "name": {
              "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "remediateAction": {
          "description": "RemediateAction defines the remediation action to apply to the idp policy For possible values check the policyv1 project (ie: Inform and inform are accepted)",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "Inform",
            "inform",
            "Enforce",
            "enforce"
          ]
        },
        "routeSubDomain": {
          "description": "RouteSubDomain defines a string that will be used for building the redirect URI callback. The value must be a valid DNS-1123 subdomain. This field is immutable.",
          "type": "string",
          "maxLength": 63,
          "minLength": 1
        },
        "type": {
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "dex",
            "rhsso"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "AuthRealmStatus defines the observed state of AuthRealm",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions contains the different condition statuses for this AuthRealm.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "type": "string",
                "maxLength": 32768
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "type": "string",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "type": "string",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ]
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "type": "string",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
              }
            },
            "additionalProperties": false
          }
        },
        "strategies": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "AuthRealmClusterStatus defines the status for each cluster",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "name"
            ],
            "properties": {
              "clusters": {
                "description": "Clusters status, one status per cluster",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "clusterOAuth",
                    "hypershiftDeployment",
                    "manifestWork",
                    "name"
                  ],
                  "properties": {
                    "clusterOAuth": {
                      "description": "ClusterOAuth status, only 1 as a authrealm has only one clusterOAuth per cluster",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "conditions": {
                          "description": "Conditions contains the different condition statuses for this ClusterOAuth.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "lastTransitionTime",
                              "message",
                              "reason",
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                                "type": "string",
                                "maxLength": 32768
                              },
                              "observedGeneration": {
                                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int64",
                                "minimum": 0
                              },
                              "reason": {
                                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                                "type": "string",
                                "maxLength": 1024,
                                "minLength": 1,
                                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                              },
                              "status": {
                                "description": "status of the condition, one of True, False, Unknown.",
                                "type": "string",
                                "enum": [
                                  "True",
                                  "False",
                                  "Unknown"
                                ]
                              },
                              "type": {
                                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                "type": "string",
                                "maxLength": 316,
                                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "name": {
                          "description": "ClusterOAuth name",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false
                    },
                    "hypershiftDeployment": {
                      "description": "HypershiftDeployment status",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "conditions": {
                          "description": "Track the conditions for each step in the desired curation that is being executed as a job",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "lastTransitionTime",
                              "message",
                              "reason",
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                                "type": "string",
                                "maxLength": 32768
                              },
                              "observedGeneration": {
                                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int64",
                                "minimum": 0
                              },
                              "reason": {
                                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                                "type": "string",
                                "maxLength": 1024,
                                "minLength": 1,
                                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                              },
                              "status": {
                                "description": "status of the condition, one of True, False, Unknown.",
                                "type": "string",
                                "enum": [
                                  "True",
                                  "False",
                                  "Unknown"
                                ]
                              },
                              "type": {
                                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                "type": "string",
                                "maxLength": 316,
                                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "name": {
                          "description": "HypershiftDeployment name",
                          "type": "string"
                        },
                        "phase": {
                          "description": "Show which phase of curation is currently being processed",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "manifestWork": {
                      "description": "ManifestWork status",
                      "type": "object",
                      "required": [
                        "name"
                      ],
                      "properties": {
                        "conditions": {
                          "description": "Conditions contains the different condition statuses for this work. Valid condition types are: 1. Applied represents workload in ManifestWork is applied successfully on managed cluster. 2. Progressing represents workload in ManifestWork is being applied on managed cluster. 3. Available represents workload in ManifestWork exists on the managed cluster. 4. Degraded represents the current state of workload does not match the desired state for a certain period.",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "lastTransitionTime",
                              "message",
                              "reason",
                              "status",
                              "type"
                            ],
                            "properties": {
                              "lastTransitionTime": {
                                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                "type": "string",
                                "format": "date-time"
                              },
                              "message": {
                                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                                "type": "string",
                                "maxLength": 32768
                              },
                              "observedGeneration": {
                                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                                "type": [
                                  "integer",
                                  "null"
                                ],
                                "format": "int64",
                                "minimum": 0
                              },
                              "reason": {
                                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                                "type": "string",
                                "maxLength": 1024,
                                "minLength": 1,
                                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                              },
                              "status": {
                                "description": "status of the condition, one of True, False, Unknown.",
                                "type": "string",
                                "enum": [
                                  "True",
                                  "False",
                                  "Unknown"
                                ]
                              },
                              "type": {
                                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                "type": "string",
                                "maxLength": 316,
                                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                              }
                            },
                            "additionalProperties": false
                          }
                        },
                        "name": {
                          "description": "Manifestwork name",
                          "type": "string"
                        },
                        "resourceStatus": {
                          "description": "ResourceStatus represents the status of each resource in manifestwork deployed on a managed cluster. The Klusterlet agent on managed cluster syncs the condition from the managed cluster to the hub.",
                          "type": [
                            "object",
                            "null"
                          ],
                          "properties": {
                            "manifests": {
                              "description": "Manifests represents the condition of manifests deployed on managed cluster. Valid condition types are: 1. Progressing represents the resource is being applied on managed cluster. 2. Applied represents the resource is applied successfully on managed cluster. 3. Available represents the resource exists on the managed cluster. 4. Degraded represents the current state of resource does not match the desired state for a certain period.",
                              "type": [
                                "array",
                                "null"
                              ],
                              "items": {
                                "description": "ManifestCondition represents the conditions of the resources deployed on a managed cluster.",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "properties": {
                                  "conditions": {
                                    "description": "Conditions represents the conditions of this resource on a managed cluster.",
                                    "type": [
                                      "array",
                                      "null"
                                    ],
                                    "items": {
                                      "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "required": [
                                        "lastTransitionTime",
                                        "message",
                                        "reason",
                                        "status",
                                        "type"
                                      ],
                                      "properties": {
                                        "lastTransitionTime": {
                                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                                          "type": "string",
                                          "format": "date-time"
                                        },
                                        "message": {
                                          "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                                          "type": "string",
                                          "maxLength": 32768
                                        },
                                        "observedGeneration": {
                                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                                          "type": [
                                            "integer",
                                            "null"
                                          ],
                                          "format": "int64",
                                          "minimum": 0
                                        },
                                        "reason": {
                                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                                          "type": "string",
                                          "maxLength": 1024,
                                          "minLength": 1,
                                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                                        },
                                        "status": {
                                          "description": "status of the condition, one of True, False, Unknown.",
                                          "type": "string",
                                          "enum": [
                                            "True",
                                            "False",
                                            "Unknown"
                                          ]
                                        },
                                        "type": {
                                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                                          "type": "string",
                                          "maxLength": 316,
                                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                                        }
                                      },
                                      "additionalProperties": false
                                    }
                                  },
                                  "resourceMeta": {
                                    "description": "ResourceMeta represents the group, version, kind, name and namespace of a resoure.",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "properties": {
                                      "group": {
                                        "description": "Group is the API Group of the Kubernetes resource.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "kind": {
                                        "description": "Kind is the kind of the Kubernetes resource.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "name": {
                                        "description": "Name is the name of the Kubernetes resource.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "namespace": {
                                        "description": "Name is the namespace of the Kubernetes resource.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "ordinal": {
                                        "description": "Ordinal represents the index of the manifest on spec.",
                                        "type": [
                                          "integer",
                                          "null"
                                        ],
                                        "format": "int32"
                                      },
                                      "resource": {
                                        "description": "Resource is the resource name of the Kubernetes resource.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "version": {
                                        "description": "Version is the version of the Kubernetes resource.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "statusFeedback": {
                                    "description": "StatusFeedback represents the values of the feild synced back defined in statusFeedbacks",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "properties": {
                                      "values": {
                                        "description": "Values represents the synced value of the interested field.",
                                        "type": [
                                          "array",
                                          "null"
                                        ],
                                        "items": {
                                          "type": [
                                            "object",
                                            "null"
                                          ],
                                          "required": [
                                            "fieldValue",
                                            "name"
                                          ],
                                          "properties": {
                                            "fieldValue": {
                                              "description": "Value is the value of the status field. The value of the status field can only be integer, string or boolean.",
                                              "type": "object",
                                              "required": [
                                                "type"
                                              ],
                                              "properties": {
                                                "boolean": {
                                                  "description": "Boolean is bool value when type is boolean.",
                                                  "type": [
                                                    "boolean",
                                                    "null"
                                                  ]
                                                },
                                                "integer": {
                                                  "description": "Integer is the integer value when type is integer.",
                                                  "type": [
                                                    "integer",
                                                    "null"
                                                  ],
                                                  "format": "int64"
                                                },
                                                "string": {
                                                  "description": "String is the string value when when type is string.",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "type": {
                                                  "description": "Type represents the type of the value, it can be integer, string or boolean.",
                                                  "type": "string",
                                                  "enum": [
                                                    "Integer",
                                                    "String",
                                                    "Boolean"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "name": {
                                              "description": "Name represents the alias name for this field. It is the same as what is specified in StatuFeedbackRule in the spec.",
                                              "type": "string"
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "x-kubernetes-list-map-keys": [
                                          "name"
                                        ],
                                        "x-kubernetes-list-type": "map"
                                      }
                                    },
                                    "additionalProperties": false
                                  }
                                },
                                "additionalProperties": false
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "name": {
                      "description": "ClusterName",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "conditions": {
                "description": "Conditions contains the different condition statuses for this Strategy.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "lastTransitionTime",
                    "message",
                    "reason",
                    "status",
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                      "type": "string",
                      "format": "date-time"
                    },
                    "message": {
                      "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                      "type": "string",
                      "maxLength": 32768
                    },
                    "observedGeneration": {
                      "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int64",
                      "minimum": 0
                    },
                    "reason": {
                      "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                      "type": "string",
                      "maxLength": 1024,
                      "minLength": 1,
                      "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                    },
                    "status": {
                      "description": "status of the condition, one of True, False, Unknown.",
                      "type": "string",
                      "enum": [
                        "True",
                        "False",
                        "Unknown"
                      ]
                    },
                    "type": {
                      "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                      "type": "string",
                      "maxLength": 316,
                      "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "name": {
                "description": "The name of the strategy",
                "type": "string"
              },
              "placement": {
                "description": "Placement",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "name"
                ],
                "properties": {
                  "conditions": {
                    "description": "Conditions contains the different condition status for this Placement.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{ // Represents the observations of a foo's current state. // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge // +listType=map // +listMapKey=type Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "lastTransitionTime",
                        "message",
                        "reason",
                        "status",
                        "type"
                      ],
                      "properties": {
                        "lastTransitionTime": {
                          "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                          "type": "string",
                          "format": "date-time"
                        },
                        "message": {
                          "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                          "type": "string",
                          "maxLength": 32768
                        },
                        "observedGeneration": {
                          "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                          "type": [
                            "integer",
                            "null"
                          ],
                          "format": "int64",
                          "minimum": 0
                        },
                        "reason": {
                          "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                          "type": "string",
                          "maxLength": 1024,
                          "minLength": 1,
                          "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$"
                        },
                        "status": {
                          "description": "status of the condition, one of True, False, Unknown.",
                          "type": "string",
                          "enum": [
                            "True",
                            "False",
                            "Unknown"
                          ]
                        },
                        "type": {
                          "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                          "type": "string",
                          "maxLength": 316,
                          "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "name": {
                    "description": "Name of the placement",
                    "type": "string"
                  },
                  "numberOfSelectedClusters": {
                    "description": "NumberOfSelectedClusters represents the number of selected ManagedClusters",
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "int32"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "identityconfig.identitatem.io",
      "kind": "AuthRealm",
      "version": "v1alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}