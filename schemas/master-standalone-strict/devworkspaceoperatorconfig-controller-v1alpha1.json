{
  "description": "DevWorkspaceOperatorConfig is the Schema for the devworkspaceoperatorconfigs API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "controller.devfile.io/v1alpha1"
      ]
    },
    "config": {
      "description": "OperatorConfiguration defines configuration options for the DevWorkspace Operator.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "enableExperimentalFeatures": {
          "description": "EnableExperimentalFeatures turns on in-development features of the controller. This option should generally not be enabled, as any capabilites are subject to removal without notice.",
          "type": [
            "boolean",
            "null"
          ]
        },
        "routing": {
          "description": "Routing defines configuration options related to DevWorkspace networking",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "clusterHostSuffix": {
              "description": "ClusterHostSuffix is the hostname suffix to be used for DevWorkspace endpoints. On OpenShift, the DevWorkspace Operator will attempt to determine the appropriate value automatically. Must be specified on Kubernetes.",
              "type": [
                "string",
                "null"
              ]
            },
            "defaultRoutingClass": {
              "description": "DefaultRoutingClass specifies the routingClass to be used when a DevWorkspace specifies an empty `.spec.routingClass`. Supported routingClasses can be defined in other controllers. If not specified, the default value of \"basic\" is used.",
              "type": [
                "string",
                "null"
              ]
            },
            "proxyConfig": {
              "description": "ProxyConfig defines the proxy settings that should be used for all DevWorkspaces. These values are propagated to workspace containers as environment variables. \n On OpenShift, the operator automatically reads values from the \"cluster\" proxies.config.openshift.io object and this value only needs to be set to override those defaults. Values for httpProxy and httpsProxy override the cluster configuration directly. Entries for noProxy are merged with the noProxy values in the cluster configuration. \n Changes to the proxy configuration are detected by the DevWorkspace Operator and propagated to DevWorkspaces. However, changing the proxy configuration for the DevWorkspace Operator itself requires restarting the controller deployment.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "httpProxy": {
                  "description": "HttpProxy is the URL of the proxy for HTTP requests, in the format http://USERNAME:PASSWORD@SERVER:PORT/",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "httpsProxy": {
                  "description": "HttpsProxy is the URL of the proxy for HTTPS requests, in the format http://USERNAME:PASSWORD@SERVER:PORT/",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "noProxy": {
                  "description": "NoProxy is a comma-separated list of hostnames and/or CIDRs for which the proxy should not be used. Ignored when HttpProxy and HttpsProxy are unset",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "workspace": {
          "description": "Workspace defines configuration options related to how DevWorkspaces are managed",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "cleanupOnStop": {
              "description": "CleanupOnStop governs how the Operator handles stopped DevWorkspaces. If set to true, additional resources associated with a DevWorkspace (e.g. services, deployments, configmaps, etc.) will be removed from the cluster when a DevWorkspace has .spec.started = false. If set to false, resources will be scaled down (e.g. deployments but the objects will be left on the cluster). The default value is false.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "defaultStorageSize": {
              "description": "DefaultStorageSize defines an optional struct with fields to specify the sizes of Persistent Volume Claims for storage classes used by DevWorkspaces.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "common": {
                  "description": "The default Persistent Volume Claim size for the \"common\" storage class. Note that the \"async\" storage class also uses the PVC size set for the \"common\" storage class. If not specified, the \"common\" and \"async\" Persistent Volume Claim sizes are set to 10Gi",
                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                  "x-kubernetes-int-or-string": true
                },
                "perWorkspace": {
                  "description": "The default Persistent Volume Claim size for the \"per-workspace\" storage class. If not specified, the \"per-workspace\" Persistent Volume Claim size is set to 5Gi",
                  "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                  "x-kubernetes-int-or-string": true
                }
              },
              "additionalProperties": false
            },
            "defaultTemplate": {
              "description": "DefaultTemplate defines an optional DevWorkspace Spec Template which gets applied to the workspace if the workspace's Template Spec Components are not defined. The DefaultTemplate will overwrite the existing Template Spec, with the exception of Projects (if any are defined).",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "attributes": {
                  "description": "Map of implementation-dependant free-form YAML attributes.",
                  "x-kubernetes-preserve-unknown-fields": true
                },
                "commands": {
                  "description": "Predefined, ready-to-use, devworkspace-related commands",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "id"
                    ],
                    "properties": {
                      "apply": {
                        "description": "Command that consists in applying a given component definition, typically bound to a devworkspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "component"
                        ],
                        "properties": {
                          "component": {
                            "description": "Describes component that will be applied",
                            "type": "string"
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": [
                                  "boolean",
                                  "null"
                                ]
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "commandType": {
                        "description": "Type of devworkspace command",
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "Exec",
                          "Apply",
                          "Composite",
                          "Custom"
                        ]
                      },
                      "composite": {
                        "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "commands": {
                            "description": "The commands that comprise this composite command",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": [
                                  "boolean",
                                  "null"
                                ]
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "parallel": {
                            "description": "Indicates if the sub-commands should be executed concurrently",
                            "type": [
                              "boolean",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "custom": {
                        "description": "Custom command whose logic is implementation-dependant and should be provided by the user possibly through some dedicated plugin",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "commandClass",
                          "embeddedResource"
                        ],
                        "properties": {
                          "commandClass": {
                            "description": "Class of command that the associated implementation component should use to process this command with the appropriate logic",
                            "type": "string"
                          },
                          "embeddedResource": {
                            "description": "Additional free-form configuration for this custom command that the implementation component will know how to use",
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": [
                                  "boolean",
                                  "null"
                                ]
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "exec": {
                        "description": "CLI Command executed in an existing component container",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "commandLine",
                          "component"
                        ],
                        "properties": {
                          "commandLine": {
                            "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
                            "type": "string"
                          },
                          "component": {
                            "description": "Describes component to which given action relates",
                            "type": "string"
                          },
                          "env": {
                            "description": "Optional list of environment variables that have to be set before running the command",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "group": {
                            "description": "Defines the group this command is part of",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "kind"
                            ],
                            "properties": {
                              "isDefault": {
                                "description": "Identifies the default command for a given group kind",
                                "type": [
                                  "boolean",
                                  "null"
                                ]
                              },
                              "kind": {
                                "description": "Kind of group the command is part of",
                                "type": "string",
                                "enum": [
                                  "build",
                                  "run",
                                  "test",
                                  "debug",
                                  "deploy"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "hotReloadCapable": {
                            "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
                            "type": [
                              "boolean",
                              "null"
                            ]
                          },
                          "label": {
                            "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "workingDir": {
                            "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "id": {
                        "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "components": {
                  "description": "List of the devworkspace components, such as editor and plugins, user-provided containers, or other types of components",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "componentType": {
                        "description": "Type of component",
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "Container",
                          "Kubernetes",
                          "Openshift",
                          "Volume",
                          "Image",
                          "Plugin",
                          "Custom"
                        ]
                      },
                      "container": {
                        "description": "Allows adding and configuring devworkspace-related containers",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "image"
                        ],
                        "properties": {
                          "annotation": {
                            "description": "Annotations that should be added to specific resources for this container",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "deployment": {
                                "description": "Annotations to be added to deployment",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "service": {
                                "description": "Annotations to be added to service",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "additionalProperties": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              }
                            },
                            "additionalProperties": false
                          },
                          "args": {
                            "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          },
                          "command": {
                            "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          },
                          "cpuLimit": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "cpuRequest": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "dedicatedPod": {
                            "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
                            "type": [
                              "boolean",
                              "null"
                            ]
                          },
                          "endpoints": {
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "name",
                                "targetPort"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "additionalProperties": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  }
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. \n Default value is `public`",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ]
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ]
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                  "type": [
                                    "boolean",
                                    "null"
                                  ]
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                  "type": "integer"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "env": {
                            "description": "Environment variables used in this container. \n The following variables are reserved and cannot be overridden via env: \n  - `$PROJECTS_ROOT` \n  - `$PROJECT_SOURCE`",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "name",
                                "value"
                              ],
                              "properties": {
                                "name": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "image": {
                            "type": "string"
                          },
                          "memoryLimit": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "memoryRequest": {
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "mountSources": {
                            "description": "Toggles whether or not the project source code should be mounted in the component. \n Defaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                            "type": [
                              "boolean",
                              "null"
                            ]
                          },
                          "sourceMapping": {
                            "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "volumeMounts": {
                            "description": "List of volumes mounts that should be mounted is this container.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "description": "Volume that should be mounted to a component container",
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "name": {
                                  "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "additionalProperties": false
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "custom": {
                        "description": "Custom component whose logic is implementation-dependant and should be provided by the user possibly through some dedicated controller",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "componentClass",
                          "embeddedResource"
                        ],
                        "properties": {
                          "componentClass": {
                            "description": "Class of component that the associated implementation controller should use to process this command with the appropriate logic",
                            "type": "string"
                          },
                          "embeddedResource": {
                            "description": "Additional free-form configuration for this custom component that the implementation controller will know how to use",
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          }
                        },
                        "additionalProperties": false
                      },
                      "image": {
                        "description": "Allows specifying the definition of an image for outer loop builds",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "imageName"
                        ],
                        "properties": {
                          "autoBuild": {
                            "description": "Defines if the image should be built during startup. \n Default value is `false`",
                            "type": [
                              "boolean",
                              "null"
                            ]
                          },
                          "dockerfile": {
                            "description": "Allows specifying dockerfile type build",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "args": {
                                "description": "The arguments to supply to the dockerfile build.",
                                "type": [
                                  "array",
                                  "null"
                                ],
                                "items": {
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                }
                              },
                              "buildContext": {
                                "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "devfileRegistry": {
                                "description": "Dockerfile's Devfile Registry source",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "id"
                                ],
                                "properties": {
                                  "id": {
                                    "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.",
                                    "type": "string"
                                  },
                                  "registryUrl": {
                                    "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  }
                                },
                                "additionalProperties": false
                              },
                              "git": {
                                "description": "Dockerfile's Git source",
                                "type": [
                                  "object",
                                  "null"
                                ],
                                "required": [
                                  "remotes"
                                ],
                                "properties": {
                                  "checkoutFrom": {
                                    "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                    "type": [
                                      "object",
                                      "null"
                                    ],
                                    "properties": {
                                      "remote": {
                                        "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "revision": {
                                        "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "additionalProperties": false
                                  },
                                  "fileLocation": {
                                    "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.",
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "remotes": {
                                    "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  }
                                },
                                "additionalProperties": false
                              },
                              "rootRequired": {
                                "description": "Specify if a privileged builder pod is required. \n Default value is `false`",
                                "type": [
                                  "boolean",
                                  "null"
                                ]
                              },
                              "srcType": {
                                "description": "Type of Dockerfile src",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "enum": [
                                  "Uri",
                                  "DevfileRegistry",
                                  "Git"
                                ]
                              },
                              "uri": {
                                "description": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "imageName": {
                            "description": "Name of the image for the resulting outerloop build",
                            "type": "string"
                          },
                          "imageType": {
                            "description": "Type of image",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "Dockerfile"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "kubernetes": {
                        "description": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "deployByDefault": {
                            "description": "Defines if the component should be deployed during startup. \n Default value is `false`",
                            "type": [
                              "boolean",
                              "null"
                            ]
                          },
                          "endpoints": {
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "name",
                                "targetPort"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "additionalProperties": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  }
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. \n Default value is `public`",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ]
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ]
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                  "type": [
                                    "boolean",
                                    "null"
                                  ]
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                  "type": "integer"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "inlined": {
                            "description": "Inlined manifest",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "locationType": {
                            "description": "Type of Kubernetes-like location",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "Uri",
                              "Inlined"
                            ]
                          },
                          "uri": {
                            "description": "Location in a file fetched from a uri.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "openshift": {
                        "description": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "deployByDefault": {
                            "description": "Defines if the component should be deployed during startup. \n Default value is `false`",
                            "type": [
                              "boolean",
                              "null"
                            ]
                          },
                          "endpoints": {
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "name",
                                "targetPort"
                              ],
                              "properties": {
                                "annotation": {
                                  "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "additionalProperties": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  }
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "exposure": {
                                  "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. \n Default value is `public`",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "public",
                                    "internal",
                                    "none"
                                  ]
                                },
                                "name": {
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "path": {
                                  "description": "Path of the endpoint URL",
                                  "type": [
                                    "string",
                                    "null"
                                  ]
                                },
                                "protocol": {
                                  "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "http",
                                    "https",
                                    "ws",
                                    "wss",
                                    "tcp",
                                    "udp"
                                  ]
                                },
                                "secure": {
                                  "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                  "type": [
                                    "boolean",
                                    "null"
                                  ]
                                },
                                "targetPort": {
                                  "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                  "type": "integer"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "inlined": {
                            "description": "Inlined manifest",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "locationType": {
                            "description": "Type of Kubernetes-like location",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "Uri",
                              "Inlined"
                            ]
                          },
                          "uri": {
                            "description": "Location in a file fetched from a uri.",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      },
                      "plugin": {
                        "description": "Allows importing a plugin. \n Plugins are mainly imported devfiles that contribute components, commands and events as a consistent single unit. They are defined in either YAML files following the devfile syntax, or as `DevWorkspaceTemplate` Kubernetes Custom Resources",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "commands": {
                            "description": "Overrides of commands encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "id"
                              ],
                              "properties": {
                                "apply": {
                                  "description": "Command that consists in applying a given component definition, typically bound to a devworkspace event. \n For example, when an `apply` command is bound to a `preStart` event, and references a `container` component, it will start the container as a K8S initContainer in the devworkspace POD, unless the component has its `dedicatedPod` field set to `true`. \n When no `apply` command exist for a given component, it is assumed the component will be applied at devworkspace start by default, unless `deployByDefault` for that component is set to false.",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "component": {
                                      "description": "Describes component that will be applied",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": [
                                            "boolean",
                                            "null"
                                          ]
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "attributes": {
                                  "description": "Map of implementation-dependant free-form YAML attributes.",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "commandType": {
                                  "description": "Type of devworkspace command",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "Exec",
                                    "Apply",
                                    "Composite"
                                  ]
                                },
                                "composite": {
                                  "description": "Composite command that allows executing several sub-commands either sequentially or concurrently",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "commands": {
                                      "description": "The commands that comprise this composite command",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": [
                                            "boolean",
                                            "null"
                                          ]
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "parallel": {
                                      "description": "Indicates if the sub-commands should be executed concurrently",
                                      "type": [
                                        "boolean",
                                        "null"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "exec": {
                                  "description": "CLI Command executed in an existing component container",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "commandLine": {
                                      "description": "The actual command-line string \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "component": {
                                      "description": "Describes component to which given action relates",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "env": {
                                      "description": "Optional list of environment variables that have to be set before running the command",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "object",
                                          "null"
                                        ],
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "group": {
                                      "description": "Defines the group this command is part of",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "properties": {
                                        "isDefault": {
                                          "description": "Identifies the default command for a given group kind",
                                          "type": [
                                            "boolean",
                                            "null"
                                          ]
                                        },
                                        "kind": {
                                          "description": "Kind of group the command is part of",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "enum": [
                                            "build",
                                            "run",
                                            "test",
                                            "debug",
                                            "deploy"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "hotReloadCapable": {
                                      "description": "Whether the command is capable to reload itself when source code changes. If set to `true` the command won't be restarted and it is expected to handle file changes on its own. \n Default value is `false`",
                                      "type": [
                                        "boolean",
                                        "null"
                                      ]
                                    },
                                    "label": {
                                      "description": "Optional label that provides a label for this command to be used in Editor UI menus for example",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "workingDir": {
                                      "description": "Working directory where the command should be executed \n Special variables that can be used: \n  - `$PROJECTS_ROOT`: A path where projects sources are mounted as defined by container component's sourceMapping. \n  - `$PROJECT_SOURCE`: A path to a project source ($PROJECTS_ROOT/<project-name>). If there are multiple projects, this will point to the directory of the first one.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "id": {
                                  "description": "Mandatory identifier that allows referencing this command in composite commands, from a parent, or in events.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "components": {
                            "description": "Overrides of components encapsulated in a parent devfile or a plugin. Overriding is done according to K8S strategic merge patch standard rules.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "object",
                                "null"
                              ],
                              "required": [
                                "name"
                              ],
                              "properties": {
                                "attributes": {
                                  "description": "Map of implementation-dependant free-form YAML attributes.",
                                  "x-kubernetes-preserve-unknown-fields": true
                                },
                                "componentType": {
                                  "description": "Type of component",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "enum": [
                                    "Container",
                                    "Kubernetes",
                                    "Openshift",
                                    "Volume",
                                    "Image"
                                  ]
                                },
                                "container": {
                                  "description": "Allows adding and configuring devworkspace-related containers",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "annotation": {
                                      "description": "Annotations that should be added to specific resources for this container",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "properties": {
                                        "deployment": {
                                          "description": "Annotations to be added to deployment",
                                          "type": [
                                            "object",
                                            "null"
                                          ],
                                          "additionalProperties": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "service": {
                                          "description": "Annotations to be added to service",
                                          "type": [
                                            "object",
                                            "null"
                                          ],
                                          "additionalProperties": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "args": {
                                      "description": "The arguments to supply to the command running the dockerimage component. The arguments are supplied either to the default command provided in the image or to the overridden command. \n Defaults to an empty array, meaning use whatever is defined in the image.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "command": {
                                      "description": "The command to run in the dockerimage component instead of the default one provided in the image. \n Defaults to an empty array, meaning use whatever is defined in the image.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      }
                                    },
                                    "cpuLimit": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "cpuRequest": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "dedicatedPod": {
                                      "description": "Specify if a container should run in its own separated pod, instead of running as part of the main development environment pod. \n Default value is `false`",
                                      "type": [
                                        "boolean",
                                        "null"
                                      ]
                                    },
                                    "endpoints": {
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "object",
                                          "null"
                                        ],
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": [
                                              "object",
                                              "null"
                                            ],
                                            "additionalProperties": {
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            }
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. \n Default value is `public`",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ]
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                            "type": [
                                              "boolean",
                                              "null"
                                            ]
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "env": {
                                      "description": "Environment variables used in this container. \n The following variables are reserved and cannot be overridden via env: \n  - `$PROJECTS_ROOT` \n  - `$PROJECT_SOURCE`",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "object",
                                          "null"
                                        ],
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "type": "string"
                                          },
                                          "value": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "image": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "memoryLimit": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "memoryRequest": {
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "mountSources": {
                                      "description": "Toggles whether or not the project source code should be mounted in the component. \n Defaults to true for all component types except plugins and components that set `dedicatedPod` to true.",
                                      "type": [
                                        "boolean",
                                        "null"
                                      ]
                                    },
                                    "sourceMapping": {
                                      "description": "Optional specification of the path in the container where project sources should be transferred/mounted when `mountSources` is `true`. When omitted, the default value of /projects is used.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "volumeMounts": {
                                      "description": "List of volumes mounts that should be mounted is this container.",
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "description": "Volume that should be mounted to a component container",
                                        "type": [
                                          "object",
                                          "null"
                                        ],
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "name": {
                                            "description": "The volume mount name is the name of an existing `Volume` component. If several containers mount the same volume name then they will reuse the same volume and will be able to access to the same files.",
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "The path in the component container where the volume should be mounted. If not path is mentioned, default path is the is `/<name>`.",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "image": {
                                  "description": "Allows specifying the definition of an image for outer loop builds",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "autoBuild": {
                                      "description": "Defines if the image should be built during startup. \n Default value is `false`",
                                      "type": [
                                        "boolean",
                                        "null"
                                      ]
                                    },
                                    "dockerfile": {
                                      "description": "Allows specifying dockerfile type build",
                                      "type": [
                                        "object",
                                        "null"
                                      ],
                                      "properties": {
                                        "args": {
                                          "description": "The arguments to supply to the dockerfile build.",
                                          "type": [
                                            "array",
                                            "null"
                                          ],
                                          "items": {
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          }
                                        },
                                        "buildContext": {
                                          "description": "Path of source directory to establish build context. Defaults to ${PROJECT_SOURCE} in the container",
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        },
                                        "devfileRegistry": {
                                          "description": "Dockerfile's Devfile Registry source",
                                          "type": [
                                            "object",
                                            "null"
                                          ],
                                          "properties": {
                                            "id": {
                                              "description": "Id in a devfile registry that contains a Dockerfile. The src in the OCI registry required for the Dockerfile build will be downloaded for building the image.",
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            },
                                            "registryUrl": {
                                              "description": "Devfile Registry URL to pull the Dockerfile from when using the Devfile Registry as Dockerfile src. To ensure the Dockerfile gets resolved consistently in different environments, it is recommended to always specify the `devfileRegistryUrl` when `Id` is used.",
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "git": {
                                          "description": "Dockerfile's Git source",
                                          "type": [
                                            "object",
                                            "null"
                                          ],
                                          "properties": {
                                            "checkoutFrom": {
                                              "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                                              "type": [
                                                "object",
                                                "null"
                                              ],
                                              "properties": {
                                                "remote": {
                                                  "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                },
                                                "revision": {
                                                  "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ]
                                                }
                                              },
                                              "additionalProperties": false
                                            },
                                            "fileLocation": {
                                              "description": "Location of the Dockerfile in the Git repository when using git as Dockerfile src. Defaults to Dockerfile.",
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            },
                                            "remotes": {
                                              "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                                              "type": [
                                                "object",
                                                "null"
                                              ],
                                              "additionalProperties": {
                                                "type": [
                                                  "string",
                                                  "null"
                                                ]
                                              }
                                            }
                                          },
                                          "additionalProperties": false
                                        },
                                        "rootRequired": {
                                          "description": "Specify if a privileged builder pod is required. \n Default value is `false`",
                                          "type": [
                                            "boolean",
                                            "null"
                                          ]
                                        },
                                        "srcType": {
                                          "description": "Type of Dockerfile src",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "enum": [
                                            "Uri",
                                            "DevfileRegistry",
                                            "Git"
                                          ]
                                        },
                                        "uri": {
                                          "description": "URI Reference of a Dockerfile. It can be a full URL or a relative URI from the current devfile as the base URI.",
                                          "type": [
                                            "string",
                                            "null"
                                          ]
                                        }
                                      },
                                      "additionalProperties": false
                                    },
                                    "imageName": {
                                      "description": "Name of the image for the resulting outerloop build",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "imageType": {
                                      "description": "Type of image",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "enum": [
                                        "Dockerfile",
                                        "AutoBuild"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "kubernetes": {
                                  "description": "Allows importing into the devworkspace the Kubernetes resources defined in a given manifest. For example this allows reusing the Kubernetes definitions used to deploy some runtime components in production.",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "deployByDefault": {
                                      "description": "Defines if the component should be deployed during startup. \n Default value is `false`",
                                      "type": [
                                        "boolean",
                                        "null"
                                      ]
                                    },
                                    "endpoints": {
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "object",
                                          "null"
                                        ],
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": [
                                              "object",
                                              "null"
                                            ],
                                            "additionalProperties": {
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            }
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. \n Default value is `public`",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ]
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                            "type": [
                                              "boolean",
                                              "null"
                                            ]
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "inlined": {
                                      "description": "Inlined manifest",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "locationType": {
                                      "description": "Type of Kubernetes-like location",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "enum": [
                                        "Uri",
                                        "Inlined"
                                      ]
                                    },
                                    "uri": {
                                      "description": "Location in a file fetched from a uri.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "name": {
                                  "description": "Mandatory name that allows referencing the component from other elements (such as commands) or from an external devfile that may reference this component through a parent or a plugin.",
                                  "type": "string",
                                  "maxLength": 63,
                                  "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                },
                                "openshift": {
                                  "description": "Allows importing into the devworkspace the OpenShift resources defined in a given manifest. For example this allows reusing the OpenShift definitions used to deploy some runtime components in production.",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "deployByDefault": {
                                      "description": "Defines if the component should be deployed during startup. \n Default value is `false`",
                                      "type": [
                                        "boolean",
                                        "null"
                                      ]
                                    },
                                    "endpoints": {
                                      "type": [
                                        "array",
                                        "null"
                                      ],
                                      "items": {
                                        "type": [
                                          "object",
                                          "null"
                                        ],
                                        "required": [
                                          "name"
                                        ],
                                        "properties": {
                                          "annotation": {
                                            "description": "Annotations to be added to Kubernetes Ingress or Openshift Route",
                                            "type": [
                                              "object",
                                              "null"
                                            ],
                                            "additionalProperties": {
                                              "type": [
                                                "string",
                                                "null"
                                              ]
                                            }
                                          },
                                          "attributes": {
                                            "description": "Map of implementation-dependant string-based free-form attributes. \n Examples of Che-specific attributes: \n - cookiesAuthEnabled: \"true\" / \"false\", \n - type: \"terminal\" / \"ide\" / \"ide-dev\",",
                                            "x-kubernetes-preserve-unknown-fields": true
                                          },
                                          "exposure": {
                                            "description": "Describes how the endpoint should be exposed on the network. \n - `public` means that the endpoint will be exposed on the public network, typically through a K8S ingress or an OpenShift route. \n - `internal` means that the endpoint will be exposed internally outside of the main devworkspace POD, typically by K8S services, to be consumed by other elements running on the same cloud internal network. \n - `none` means that the endpoint will not be exposed and will only be accessible inside the main devworkspace POD, on a local address. \n Default value is `public`",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "enum": [
                                              "public",
                                              "internal",
                                              "none"
                                            ]
                                          },
                                          "name": {
                                            "type": "string",
                                            "maxLength": 63,
                                            "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                                          },
                                          "path": {
                                            "description": "Path of the endpoint URL",
                                            "type": [
                                              "string",
                                              "null"
                                            ]
                                          },
                                          "protocol": {
                                            "description": "Describes the application and transport protocols of the traffic that will go through this endpoint. \n - `http`: Endpoint will have `http` traffic, typically on a TCP connection. It will be automaticaly promoted to `https` when the `secure` field is set to `true`. \n - `https`: Endpoint will have `https` traffic, typically on a TCP connection. \n - `ws`: Endpoint will have `ws` traffic, typically on a TCP connection. It will be automaticaly promoted to `wss` when the `secure` field is set to `true`. \n - `wss`: Endpoint will have `wss` traffic, typically on a TCP connection. \n - `tcp`: Endpoint will have traffic on a TCP connection, without specifying an application protocol. \n - `udp`: Endpoint will have traffic on an UDP connection, without specifying an application protocol. \n Default value is `http`",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "enum": [
                                              "http",
                                              "https",
                                              "ws",
                                              "wss",
                                              "tcp",
                                              "udp"
                                            ]
                                          },
                                          "secure": {
                                            "description": "Describes whether the endpoint should be secured and protected by some authentication process. This requires a protocol of `https` or `wss`.",
                                            "type": [
                                              "boolean",
                                              "null"
                                            ]
                                          },
                                          "targetPort": {
                                            "description": "Port number to be used within the container component. The same port cannot be used by two different container components.",
                                            "type": [
                                              "integer",
                                              "null"
                                            ]
                                          }
                                        },
                                        "additionalProperties": false
                                      }
                                    },
                                    "inlined": {
                                      "description": "Inlined manifest",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    },
                                    "locationType": {
                                      "description": "Type of Kubernetes-like location",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "enum": [
                                        "Uri",
                                        "Inlined"
                                      ]
                                    },
                                    "uri": {
                                      "description": "Location in a file fetched from a uri.",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "volume": {
                                  "description": "Allows specifying the definition of a volume shared by several other components",
                                  "type": [
                                    "object",
                                    "null"
                                  ],
                                  "properties": {
                                    "ephemeral": {
                                      "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
                                      "type": [
                                        "boolean",
                                        "null"
                                      ]
                                    },
                                    "size": {
                                      "description": "Size of the volume",
                                      "type": [
                                        "string",
                                        "null"
                                      ]
                                    }
                                  },
                                  "additionalProperties": false
                                }
                              },
                              "additionalProperties": false
                            }
                          },
                          "id": {
                            "description": "Id in a registry that contains a Devfile yaml file",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "importReferenceType": {
                            "description": "type of location from where the referenced template structure should be retrieved",
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "Uri",
                              "Id",
                              "Kubernetes"
                            ]
                          },
                          "kubernetes": {
                            "description": "Reference to a Kubernetes CRD of type DevWorkspaceTemplate",
                            "type": [
                              "object",
                              "null"
                            ],
                            "required": [
                              "name"
                            ],
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "namespace": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "registryUrl": {
                            "description": "Registry URL to pull the parent devfile from when using id in the parent reference. To ensure the parent devfile gets resolved consistently in different environments, it is recommended to always specify the `registryUrl` when `id` is used.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "uri": {
                            "description": "URI Reference of a parent devfile YAML file. It can be a full URL or a relative URI with the current devfile as the base URI.",
                            "type": [
                              "string",
                              "null"
                            ]
                          },
                          "version": {
                            "description": "Specific stack/sample version to pull the parent devfile from, when using id in the parent reference. To specify `version`, `id` must be defined and used as the import reference source. `version` can be either a specific stack version, or `latest`. If no `version` specified, default version will be used.",
                            "type": [
                              "string",
                              "null"
                            ],
                            "pattern": "^(latest)|(([1-9])\\.([0-9]+)\\.([0-9]+)(\\-[0-9a-z-]+(\\.[0-9a-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?)$"
                          }
                        },
                        "additionalProperties": false
                      },
                      "volume": {
                        "description": "Allows specifying the definition of a volume shared by several other components",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "ephemeral": {
                            "description": "Ephemeral volumes are not stored persistently across restarts. Defaults to false",
                            "type": [
                              "boolean",
                              "null"
                            ]
                          },
                          "size": {
                            "description": "Size of the volume",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "events": {
                  "description": "Bindings of commands to events. Each command is referred-to by its name.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "postStart": {
                      "description": "IDs of commands that should be executed after the devworkspace is completely started. In the case of Che-Theia, these commands should be executed after all plugins and extensions have started, including project cloning. This means that those commands are not triggered until the user opens the IDE in his browser.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "postStop": {
                      "description": "IDs of commands that should be executed after stopping the devworkspace.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "preStart": {
                      "description": "IDs of commands that should be executed before the devworkspace start. Kubernetes-wise, these commands would typically be executed in init containers of the devworkspace POD.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "preStop": {
                      "description": "IDs of commands that should be executed before stopping the devworkspace.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "additionalProperties": false
                },
                "projects": {
                  "description": "Projects worked on in the devworkspace, containing names and sources locations",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "clonePath": {
                        "description": "Path relative to the root of the projects to which this project should be cloned into. This is a unix-style relative path (i.e. uses forward slashes). The path is invalid if it is absolute or tries to escape the project root through the usage of '..'. If not specified, defaults to the project name.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "custom": {
                        "description": "Project's Custom source",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "embeddedResource",
                          "projectSourceClass"
                        ],
                        "properties": {
                          "embeddedResource": {
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "projectSourceClass": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "git": {
                        "description": "Project's Git source",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "remotes"
                        ],
                        "properties": {
                          "checkoutFrom": {
                            "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "remote": {
                                "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "revision": {
                                "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "remotes": {
                            "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                            "type": "object",
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "Project name",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "sourceType": {
                        "description": "Type of project source",
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "Git",
                          "Zip",
                          "Custom"
                        ]
                      },
                      "zip": {
                        "description": "Project's Zip source",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "location": {
                            "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "starterProjects": {
                  "description": "StarterProjects is a project that can be used as a starting point when bootstrapping new projects",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "attributes": {
                        "description": "Map of implementation-dependant free-form YAML attributes.",
                        "x-kubernetes-preserve-unknown-fields": true
                      },
                      "custom": {
                        "description": "Project's Custom source",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "embeddedResource",
                          "projectSourceClass"
                        ],
                        "properties": {
                          "embeddedResource": {
                            "x-kubernetes-embedded-resource": true,
                            "x-kubernetes-preserve-unknown-fields": true
                          },
                          "projectSourceClass": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": false
                      },
                      "description": {
                        "description": "Description of a starter project",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "git": {
                        "description": "Project's Git source",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "remotes"
                        ],
                        "properties": {
                          "checkoutFrom": {
                            "description": "Defines from what the project should be checked out. Required if there are more than one remote configured",
                            "type": [
                              "object",
                              "null"
                            ],
                            "properties": {
                              "remote": {
                                "description": "The remote name should be used as init. Required if there are more than one remote configured",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "revision": {
                                "description": "The revision to checkout from. Should be branch name, tag or commit id. Default branch is used if missing or specified revision is not found.",
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            },
                            "additionalProperties": false
                          },
                          "remotes": {
                            "description": "The remotes map which should be initialized in the git project. Projects must have at least one remote configured while StarterProjects & Image Component's Git source can only have at most one remote configured.",
                            "type": "object",
                            "additionalProperties": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      },
                      "name": {
                        "description": "Project name",
                        "type": "string",
                        "maxLength": 63,
                        "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
                      },
                      "sourceType": {
                        "description": "Type of project source",
                        "type": [
                          "string",
                          "null"
                        ],
                        "enum": [
                          "Git",
                          "Zip",
                          "Custom"
                        ]
                      },
                      "subDir": {
                        "description": "Sub-directory from a starter project to be used as root for starter project.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "zip": {
                        "description": "Project's Zip source",
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "location": {
                            "description": "Zip project's source location address. Should be file path of the archive, e.g. file://$FILE_PATH",
                            "type": [
                              "string",
                              "null"
                            ]
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "variables": {
                  "description": "Map of key-value variables used for string replacement in the devfile. Values can be referenced via {{variable-key}} to replace the corresponding value in string fields in the devfile. Replacement cannot be used for \n  - schemaVersion, metadata, parent source \n  - element identifiers, e.g. command id, component name, endpoint name, project name \n  - references to identifiers, e.g. in events, a command's component, container's volume mount name \n  - string enums, e.g. command group kind, endpoint exposure",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "additionalProperties": false
            },
            "idleTimeout": {
              "description": "IdleTimeout determines how long a workspace should sit idle before being automatically scaled down. Proper functionality of this configuration property requires support in the workspace being started. If not specified, the default value of \"15m\" is used.",
              "type": [
                "string",
                "null"
              ]
            },
            "ignoredUnrecoverableEvents": {
              "description": "IgnoredUnrecoverableEvents defines a list of Kubernetes event names that should be ignored when deciding to fail a DevWorkspace startup. This option should be used if a transient cluster issue is triggering false-positives (for example, if the cluster occasionally encounters FailedScheduling events). Events listed here will not trigger DevWorkspace failures.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "imagePullPolicy": {
              "description": "ImagePullPolicy defines the imagePullPolicy used for containers in a DevWorkspace For additional information, see Kubernetes documentation for imagePullPolicy. If not specified, the default value of \"Always\" is used.",
              "type": [
                "string",
                "null"
              ],
              "enum": [
                "IfNotPresent",
                "Always",
                "Never"
              ]
            },
            "podSecurityContext": {
              "description": "PodSecurityContext overrides the default PodSecurityContext used for all workspace-related pods created by the DevWorkspace Operator when running on Kubernetes. On OpenShift, this configuration option is ignored. If set, the entire pod security context is overridden; values are not merged.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "fsGroup": {
                  "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: \n 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- \n If unset, the Kubelet will not modify the ownership and permissions of any volume.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                },
                "fsGroupChangePolicy": {
                  "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "runAsGroup": {
                  "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                },
                "runAsNonRoot": {
                  "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "runAsUser": {
                  "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int64"
                },
                "seLinuxOptions": {
                  "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "level": {
                      "description": "Level is SELinux level label that applies to the container.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "role": {
                      "description": "Role is a SELinux role label that applies to the container.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type is a SELinux type label that applies to the container.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "user": {
                      "description": "User is a SELinux user label that applies to the container.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "seccompProfile": {
                  "description": "The seccomp options to use by the containers in this pod.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "localhostProfile": {
                      "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "type indicates which kind of seccomp profile will be applied. Valid options are: \n Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "supplementalGroups": {
                  "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "int64"
                  }
                },
                "sysctls": {
                  "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "Sysctl defines a kernel parameter to be set",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name",
                      "value"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of a property to set",
                        "type": "string"
                      },
                      "value": {
                        "description": "Value of a property to set",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "windowsOptions": {
                  "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "gmsaCredentialSpec": {
                      "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "gmsaCredentialSpecName": {
                      "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "runAsUserName": {
                      "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "progressTimeout": {
              "description": "ProgressTimeout determines the maximum duration a DevWorkspace can be in a \"Starting\" or \"Failing\" phase without progressing before it is automatically failed. Duration should be specified in a format parseable by Go's time package, e.g. \"15m\", \"20s\", \"1h30m\", etc. If not specified, the default value of \"5m\" is used.",
              "type": [
                "string",
                "null"
              ]
            },
            "pvcName": {
              "description": "PVCName defines the name used for the persistent volume claim created to support workspace storage when the 'common' storage class is used. If not specified, the default value of `claim-devworkspace` is used. Note that changing this configuration value after workspaces have been created will disconnect all existing workspaces from the previously-used persistent volume claim, and will require manual removal of the old PVCs in the cluster.",
              "type": [
                "string",
                "null"
              ],
              "maxLength": 63,
              "pattern": "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
            },
            "storageClassName": {
              "description": "StorageClassName defines an optional storageClass to use for persistent volume claims created to support DevWorkspaces",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "DevWorkspaceOperatorConfig"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta_v2"
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "controller.devfile.io",
      "kind": "DevWorkspaceOperatorConfig",
      "version": "v1alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}